import React, { Component } from 'react';
import PropTypes from 'prop-types';

class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // Send an analytic event so we can track the errors.
    // TODO: Integrate this in to Rollbar.
    this.props.sendAnalyticsEvent('ERROR_BOUNDARY_COMPONENT_FAILURE', {
      message: error.message,
      componentStack: errorInfo.componentStack,
      stack: error.stack,
    });
  }

  render() {
    const { children, fallBackChildren } = this.props;
    let renderedElement = children;

    if (this.state.hasError) {
      if (this.props.fallBackChildren && React.isValidElement(fallBackChildren)) {
        renderedElement = fallBackChildren;
      } else {
        renderedElement = null;
      }
    }

    return renderedElement;
  }
}

ErrorBoundary.defaultProps = {
  fallBackChildren: null,
};

ErrorBoundary.propTypes = {
  children: PropTypes.object.isRequired,
  fallBackChildren: PropTypes.object,
  sendAnalyticsEvent: PropTypes.func.isRequired,
};

export default ErrorBoundary;
