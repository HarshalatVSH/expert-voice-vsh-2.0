// Utilities and consts useful for dealing with responsive breakpoints

// Consts that map to the responsive breakpoints used in exp-core-style
export const BREAKPOINTS = {
  xl: 1128,
  lg: 1024,
  md: 736,
  sm: 599,
  xs: 375,
  xxs: 320,
  min: 0,
};

// MediaQueryLists by associated responsive breakpoint
const createMediaMatch = (query) => {
  const mql = window.matchMedia(query);

  // Polyfill in the addEventListener & removeEventListener if they're not present
  if (!mql.addEventListener) {
    mql.addEventListener = (event, listener) => mql.addListener(listener);
  }

  if (!mql.removeEventListener) {
    mql.removeEventListener = (event, listener) => mql.removeListener(listener);
  }

  return mql;
};

export const MEDIA_QUERIES = {
  xl: createMediaMatch(`(min-width: ${BREAKPOINTS.xl}px)`),
  lg: createMediaMatch(`(min-width: ${BREAKPOINTS.lg}px)`),
  md: createMediaMatch(`(min-width: ${BREAKPOINTS.md}px)`),
  sm: createMediaMatch(`(min-width: ${BREAKPOINTS.sm}px)`),
  xs: createMediaMatch(`(min-width: ${BREAKPOINTS.xs}px)`),
};

// Takes a map of { breakpoint: value } and returns the appropriate value based on the browser width
export const getValueFromMapForWidth = (map, initial) => {
  const sortedKeys = Object.keys(map).sort((a, b) => (parseInt(a, 10) - parseInt(b, 10)));
  const currentBreakpoint = sortedKeys
    .reduce((previous, current) => (window.innerWidth >= current ? current : previous), initial);

  return map[currentBreakpoint];
};
