import moment from 'moment';
import { getExpMessage } from 'exp-react-localization';

/* Expects a moment.js parseable date string (pretty much anything)
 and returns the example formats, as currently defined by UX for ugc...
 Less than a minute = 'just now'
 Less than 24 hours = '15 hours ago' or '15 minutes ago'
 More than 24 hours = 'Jan 5th at 12:12pm'
*/

const getRelativeTimeAgo = (dateOfPost, includeTime = true) => {
  const creation = moment(dateOfPost);
  const now = moment();
  const hoursAgo = now.diff(creation, 'hours');
  const minutesAgo = now.diff(creation, 'minutes');

  if (minutesAgo <= 1) {
    return getExpMessage({
      defaultMessage: 'just now',
      messageKey: 'timeUtils.justNow',
      namespace: 'reactMessages',
    });
  }

  if (hoursAgo < 1) {
    return getExpMessage({
      defaultMessage: '{minutes} minutes ago',
      messageKey: 'timeUtils.xMinutesAgo',
      namespace: 'reactMessages',
      values: { minutes: minutesAgo },
    });
  }

  if (hoursAgo === 1) {
    return getExpMessage({
      defaultMessage: '{hours} hour ago',
      messageKey: 'timeUtils.xHourAgo',
      namespace: 'reactMessages',
      values: { hours: hoursAgo },
    });
  }

  if (hoursAgo < 24) {
    return getExpMessage({
      defaultMessage: '{hours} hours ago',
      messageKey: 'timeUtils.xHoursAgo',
      namespace: 'reactMessages',
      values: { hours: hoursAgo },
    });
  }

  if (includeTime) {
    return creation.format(getExpMessage({
      defaultMessage: 'MMM Do [at] LT',
      messageKey: 'timeUtils.longRelativeFormat',
      namespace: 'reactMessages',
    }));
  }

  return creation.format('ll');
};

export default getRelativeTimeAgo;
