import decodeHTML from './decodeHTML';
import ErrorBoundary from './components/ErrorBoundary';
import ExternalableLink from './components/ExternalableLink';
import getNativeHook from './getNativeHook';
import { buildProductImageUrl, buildProductImageUrlMaxSize } from './buildProductImageUrl';
import getDataAttribute from './getDataAttribute';
import getFormattedElapsedTime from './getFormattedElapsedTime';
import getRelativeTimeAgo from './getRelativeTimeAgo';
import Image from './components/Image';
import OrgAvatar from './components/OrgAvatar';
import Star from './components/Star';
import Teleporter from './components/Teleporter';
import Tooltip from './components/Tooltip';

import {
  BREAKPOINTS,
  MEDIA_QUERIES,
} from './responsiveUtils';

const formatHTML = (input) => {
  let output = input;
  if (input.includes('&reg')) {
    output = output.replace(/&reg/gi, '&#174');
  }
  if (input.includes('&copy')) {
    output = output.replace(/&copy/gi, '&#169');
  }
  if (input.includes('&trade')) {
    output = output.replace(/&trade/gi, '&#8482');
  }
  return output;
};

const formatPrice = (val, code = 'USD') => {
  const symbol = (code === 'USD') ? '$' : code;
  let price = val.toFixed(2);
  price = price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  return `${symbol}${price}`;
};

/**
* Filters to the first image size available from a given filter order.
* @param images
* @param filterOrder
*/
const filterImagesToSize = (images, filterOrder) =>
  filterOrder.filter(size => images[size] && images[size].uri).map(size => images[size].uri)[0];

export const getQueryParamByName = (name, searchUrl) => {
  const url = searchUrl && searchUrl.length ? searchUrl : window.location.href;
  const regexName = name.replace(/[[\]]/g, '\\$&');
  const regex = new RegExp(`[?&]${regexName}(=([^&#]*)|&|#|$)`);
  const results = regex.exec(url);

  if (!results) {
    return null;
  }
  if (!results[2]) {
    return '';
  }

  return decodeURIComponent(results[2].replace(/\+/g, ' '));
};

const handleTradeMark = value => formatHTML(value)
  .replace(/&#(\d+);/g, (m, n) => String.fromCharCode(n));

const stripTags = value => value.replace(/<{1}[^<>]{1,}>{1}/g, '');

// Export the hooks
export * from './hooks';

export {
  BREAKPOINTS,
  buildProductImageUrl,
  buildProductImageUrlMaxSize,
  decodeHTML,
  ErrorBoundary,
  ExternalableLink,
  filterImagesToSize,
  formatHTML,
  formatPrice,
  getDataAttribute,
  getFormattedElapsedTime,
  getNativeHook,
  getRelativeTimeAgo,
  handleTradeMark,
  Image,
  MEDIA_QUERIES,
  OrgAvatar,
  Star,
  stripTags,
  Teleporter,
  Tooltip,
};
